# New input format as a multiline string
multiline_string = """
1, 1, 280
2, 2, 280
3, 2, 280
4, 2, 280
5, 3, 280
6, 4, 280
7, 4, 280
8, 6, 280
9, 7, 280
10, 8, 280
11, 10, 280
12, 13, 280
13, 13, 279
14, 12, 280
15, 13, 280
16, 12, 280
17, 15, 280
18, 13, 275
19, 14, 271
20, 16, 279
21, 17, 277
22, 20, 280
23, 19, 272
24, 18, 274
25, 18, 267
26, 20, 274
27, 22, 274
28, 20, 272
29, 21, 269
30, 20, 270
31, 20, 273
32, 20, 272
33, 22, 264
34, 19, 259
35, 20, 261
36, 19, 259
37, 23, 270
38, 21, 266
39, 20, 266
40, 19, 262
41, 23, 269
42, 22, 263
43, 25, 261
44, 21, 257
45, 19, 258
46, 22, 261
47, 18, 256
48, 19, 258
49, 21, 262
50, 18, 253
51, 15, 248
52, 16, 253
53, 13, 241
54, 19, 253
55, 13, 241
56, 14, 241
57, 16, 244
58, 11, 239
59, 18, 248
60, 13, 246
61, 14, 242
62, 15, 244
63, 13, 243
64, 17, 251
65, 12, 250
66, 10, 242
67, 14, 245
68, 13, 243
69, 10, 236
70, 11, 244
71, 11, 222
72, 15, 249
73, 13, 239
74, 9, 222
75, 14, 229
76, 10, 222
77, 12, 239
78, 14, 237
79, 10, 220
80, 11, 235
81, 10, 238
82, 10, 234
83, 10, 218
84, 10, 221
85, 8, 216
86, 8, 216
87, 9, 217
88, 8, 216
89, 9, 217
90, 8, 216
91, 8, 216
92, 9, 217
93, 8, 215
94, 10, 223
95, 11, 223
96, 7, 214
97, 7, 214
98, 7, 215
99, 10, 218
100, 7, 215
101, 7, 215
102, 9, 217
103, 10, 218
104, 9, 217
105, 8, 216
106, 7, 214
107, 7, 213
108, 8, 215
109, 8, 216
110, 8, 215
111, 7, 215
112, 6, 214
113, 8, 214
114, 5, 211
115, 6, 216
116, 9, 219
117, 7, 212
118, 7, 213
119, 7, 213
120, 8, 214
121, 5, 211
122, 6, 212
123, 8, 213
124, 8, 214
125, 6, 214
126, 6, 214
127, 7, 215
128, 8, 216
129, 10, 212
130, 10, 205
131, 14, 208
132, 16, 209
133, 16, 209
134, 20, 209
135, 24, 211
136, 26, 211
137, 26, 195
138, 27, 184
139, 35, 167
140, 35, 186
141, 21, 162
142, 28, 171
143, 37, 177
144, 23, 172
145, 35, 169
146, 33, 165
147, 34, 124
148, 31, 170
149, 37, 169
150, 35, 171
151, 43, 200
152, 32, 143
153, 34, 116
154, 34, 87
155, 28, 86
156, 29, 50
157, 34, 105
158, 27, 66
159, 24, 43
160, 24, 70
161, 24, 71
162, 23, 62
163, 21, 34
164, 15, 21
165, 26, 45
166, 18, 34
167, 19, 30
168, 18, 28
169, 14, 48
170, 14, 22
171, 10, 38
172, 11, 17
173, 10, 12
174, 11, 14
175, 11, 22
176, 6, 11
177, 6, 8
178, 5, 7
179, 2, 2
180, 2, 4
181, 6, 10
182, 5, 6
183, 9, 13
184, 4, 5
185, 8, 9
186, 3, 4
187, 1, 1
188, 1, 1
190, 2, 3
191, 1, 8
192, 1, 1
193, 1, 1
194, 1, 1
195, 1, 3
196, 1, 1
197, 2, 5
198, 1, 1
199, 2, 5
200, 2, 5
201, 4, 7
202, 2, 5
204, 1, 1
205, 1, 1
206, 1, 1
208, 1, 1
210, 1, 1
219, 2, 2
220, 1, 1
221, 1, 1
222, 1, 1
223, 1, 1
224, 1, 1
226, 1, 1
229, 1, 1
230, 1, 1
231, 1, 1
232, 1, 1
233, 1, 1
234, 1, 1
235, 1, 1
236, 1, 1
237, 1, 1
238, 1, 1
239, 1, 1
240, 1, 1
241, 1, 1
242, 1, 1
243, 1, 1
244, 2, 2
245, 2, 2
246, 2, 2
247, 1, 1
248, 2, 2
249, 2, 2
250, 2, 2
251, 2, 2
252, 1, 1
253, 1, 1
254, 2, 2
255, 1, 1
256, 2, 2
258, 1, 1
261, 1, 1
262, 1, 1
263, 1, 1
265, 1, 1
270, 1, 1
274, 1, 1
275, 1, 1
278, 1, 1
279, 1, 1
282, 1, 1
284, 1, 1
287, 1, 1
321, 1, 1
343, 1, 1
"""
lines = multiline_string.strip().split('\n')



# Initialize variables for corrected logic

final_corrected_output = []

last_value = None

previous_line = None



for i, line in enumerate(lines):

    current_value = line.split(", ")[-1]

    # Check if we need to add the previous line (when value changes)

    if last_value is not None and current_value != last_value and previous_line is not None:

        final_corrected_output.append(previous_line)

    last_value = current_value

    previous_line = line

    # For the last line in the list or when the next line's value is different

    if i == len(lines) - 1 or lines[i + 1].split(", ")[-1] != current_value:

        final_corrected_output.append(line)



# Since this logic may include duplicates or cause reverse ordering issues, we filter out duplicates next

unique_output = []

[unique_output.append(item) for item in final_corrected_output if item not in unique_output]



# Print the corrected, unique output

for line in unique_output:

    print(line)